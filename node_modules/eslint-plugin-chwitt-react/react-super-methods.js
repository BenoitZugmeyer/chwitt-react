/**
 * @fileoverview Rule to check if the super method is called in React component lifecycle methods
 * @author Beno√Æt Zugmeyer
 */

"use strict";

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

function looksLike(source, schema) {
    var key;
    for (key in schema) {
        var sourceValue = source[key];
        var schemaValue = schema[key];
        if (Array.isArray(schemaValue)) {
            if (schemaValue.indexOf(sourceValue) < 0) return false;
        }
        else if (schemaValue && typeof schemaValue === 'object') {
            if (!sourceValue || typeof sourceValue !== 'object') return false;
            if (!looksLike(sourceValue, schemaValue)) return false;
        }
        else if (sourceValue !== schemaValue) return false;
    }
    return true;
}

module.exports = function (context) {

    return {
        "MethodDefinition": function (node) {

            var isValidMethod = looksLike(node, {
                value: {
                    type: 'FunctionExpression'
                },
                key: {
                    name: [
                        'componentDidMount',
                        'componentDidUpdate',
                        'componentWillMount',
                        'componentWillReceiveProps',
                        'componentWillUnmount',
                        'componentWillUpdate',
                    ]
                }
            });

            var isBaseComponent = looksLike(node, {
                parent: {
                    parent: {
                        type: "ClassDeclaration",
                        superClass: {
                            type: 'MemberExpression',
                            object: {
                                name: 'React',
                            },
                            property: {
                                name: 'Component',
                            }
                        }
                    }
                }
            });

            if (!isValidMethod || isBaseComponent) return;

            var hasSuperCall = looksLike(node, {
                value: {
                    body: {
                        body: {
                            0: {
                                type: 'ExpressionStatement',
                                expression: {
                                    type: 'CallExpression',
                                    callee: {
                                        type: 'MemberExpression',
                                        object: {
                                            type: 'Identifier',
                                            name: 'super'
                                        },
                                        property: {
                                            name: node.key.name
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            });

            if (!hasSuperCall) {
                context.report(node, 'super.' + node.key.name + ' isn\'t called');
            }
        }
    };

};

